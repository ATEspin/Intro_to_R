counts<-table(by_letter)
if (any(by_letter=="e")){
contains_e<-TRUE
} else{
contains_e<-FALSE
}
print(i)
cat("\t", "n letters:", string_length, "\n")
cat("\t", "1st letter:", first_letter, "\n")
cat("\t", "contains e:", contains_e, "\n")
cat("\t", "letter count:", paste0(names(counts),": " ,counts, " | "), "\n")
}
plot(x=0, y=0, xlim = c(0,10), ylim = c(0,100))
count<-0
while ( count <=10){ #set the condition
points(x = count, y = count^2)
Sys.sleep(0.8)
count <- count + 1 # note that we need to update the index variable in the condition
}
df<-iris
head(iris)
str(df)
ncol(df)
class_df<-character(ncol(df))
class_df
seq_along(df)
for( i in seq_along(df)){
class_df[i]<-class(df[,i])
}
class_df
class_df<-sapply(df, class)
class_df
df<-mtcars
df
means <- numeric(ncol(df))
means
seq_along(df)
for (i in seq_along(df)) {
means[i] <- mean(df[,i])
}
sds <- numeric(ncol(df))
for (i in seq_along(df)) {
sds[i] <- sd(df[,i])
}
means
sds
means<-apply(df, 2, mean)
sds<-apply(df, 2, sd)
means
sds
colMeans(df)
for (i in my_second_vector){
string_length<-nchar(i)
by_letter<-unlist(strsplit(i, split = ""))
first_letter<-by_letter[1]
counts<-table(by_letter)
if (any(by_letter=="e")){
contains_e<-TRUE
} else{
contains_e<-FALSE
}
print(i)
cat("\t", "n letters:", string_length, "\n")
cat("\t", "1st letter:", first_letter, "\n")
cat("\t", "contains e:", contains_e, "\n")
cat("\t", "letter count:", paste0(names(counts),": " ,counts, " | "), "\n")
}
plot(x=0, y=0, xlim = c(0,10), ylim = c(0,100))
count<-0
while ( count <=10){ #set the condition
points(x = count, y = count^2)
Sys.sleep(0.8)
count <- count + 1 # note that we need to update the index variable in the condition
}
sleep
boxplot(extra ~ group, data = sleep) #boxplot with base R
t_test <- mean_diff/sqrt(pooled_sd^2 *(1/n1+1/n2))
t_test
ggplot(sleep, aes(group,extra, group = ID))+
geom_point()+
geom_line()
mwm_df <- read.csv("odc-tbi_408.csv")
mwm_dictionary <-read.csv("odc-tbi_408_dict.csv")
colnames(mwm_df)
mwm_dictionary %>%
DT::datatable()
clear()
plot(cars)
?plot
an_integer <- 1
an_integer
an_integer
a_character <- "I am a character"
a_character
my_vector <- c(1,3,4,5,6)
typeof(my_vector) # this line tells us the type of the vector
my_vector <- c(1L,3L,4L,5L,6L) # this is a numeric vector
my_vector # this line prints the vector
typeof(my_vector) # this line tells us the type of the vector
my_second_vector <- c("Russell", "Adam", "Abel")
typeof(my_second_vector)
my_third_vector <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
typeof(my_third_vector)
my_vector
my_vector[2]
my_second_vector[c(1,3)]
my_matrix <- matrix(data = c(1,2,3,4), nrow = 2, byrow = TRUE) # a 2 row matrix
my_matrix
my_matrix <- matrix(data = c(1,2,3,4), nrow = 2, byrow = FALSE) # a 2 row matrix
my_matrix
t(my_matrix)
my_matrix[2,1]
my_matrix[,1]
my_matrix[2,]
my_matrix[,]
my_array <- array( data = c(1,4,5,6,7,2,4,9,8, 6, 7, 7), dim = c(2,2,3))
my_array
my_array[1,,]
my_array[,,1]
my_array[2,2,2]
my_list <- list("Genes" = c("gfap", "tnfa", "il1b"), "expression" = c(10.3, 34.5, 5.7))
my_list
View(my_list)
my_list2<-list("my_list" = my_list, "a_vector" = my_vector, "a_matrix" =my_matrix)
View(my_list2)
my_list2
my_list$expression
my_list[[1]]
my_list[["expression"]]
mtcars
mtcars$disp
mtcars[c(1,2,3),"disp"]
mtcars[,c("disp", "cyl")]
mtcars[,4]
my_dataframe <- data.frame(Gene = c("gfap", "tnfa", "il1b"),
expression = c(10.3, 34.5, 5.7))
my_dataframe
#Length
length(my_vector)
length(my_list)
#Dimensions
dim(my_vector)
dim(my_matrix)
my_matrix
dim(mtcars)
#Names
names(my_list)
rownames(mtcars)
colnames(my_dataframe)
colnames(mtcars)
#structure
str(my_list)
str(my_dataframe)
str(iris)
factor(my_second_vector)
factor(my_second_vector, levels = c("Adam", "Russell", "Abel"))
my_factor<-factor(my_second_vector, levels = c("Adam", "Russell", "Abel"))
my_factor
as.numeric(my_factor)
learned_R <- "yes"
if (learned_R == "yes") {
print("You are fRee!")
}
learned_R <- "y"
if (learned_R == "yes") {
print("You are fRee!")
} else if (learned_R == "no"){
print("Keep trying!")
} else{
print("input error, it is yes or no")
}
learned_R = TRUE
if (learned_R != FALSE) {
print("You are fRee!")
} else{
print("Keep trying!")
}
learned_R != FALSE
if (learned_R != FALSE) {
print("You are fRee!")
} else{
print("Keep trying!")
}
learned_R <-
FALSE
if (learned_R != FALSE) {
print("You are fRee!")
} else{
print("Keep trying!")
}
ifelse( test = {my_vector%%2 == 0}, yes = "even", no = "odd")
1:10
for (i in 1:10){
cat("iteration:", i, "\n")
}
for (i in my_second_vector){
cat("names:", i, "\n")
}
for (i in 1:10){
cat("iteration:", i)
}
for (i in my_second_vector){
string_length<-nchar(i)
by_letter<-unlist(strsplit(i, split = ""))
first_letter<-by_letter[1]
counts<-table(by_letter)
if (any(by_letter=="e")){
contains_e<-TRUE
} else{
contains_e<-FALSE
}
print(i)
cat("\t", "n letters:", string_length, "\n")
cat("\t", "1st letter:", first_letter, "\n")
cat("\t", "contains e:", contains_e, "\n")
cat("\t", "letter count:", paste0(names(counts),": " ,counts, " | "), "\n")
}
plot(x=0, y=0, xlim = c(0,10), ylim = c(0,100))
count<-0
while ( count <=10){ #set the condition
points(x = count, y = count^2)
Sys.sleep(0.8)
count <- count + 1 # note that we need to update the index variable in the condition
}
count<-0
plot(x=0, y=0, xlim = c(0,10), ylim = c(0,100))
count<-0
while ( count <=10){ #set the condition
points(x = count, y = count^2)
# Sys.sleep(0.8)
count <- count + 1 # note that we need to update the index variable in the condition
}
plot(x=0, y=0, xlim = c(0,10), ylim = c(0,100))
count<-0
while ( count <=10){ #set the condition
points(x = count, y = count^2)
Sys.sleep(1)
count <- count + 1 # note that we need to update the index variable in the condition
}
df<-iris
head(iris)
head(iris, 5)
str(df)
ncol(df)
character(ncol(df))
class_df<-character(ncol(df))
seq_along(df)
for( i in seq_along(df)){
class_df[i]<-class(df[,i])
}
class_df
class_df<-sapply(df, class)
class_df
df<-mtcars
head(df)
means <- numeric(ncol(df))
means
for (i in seq_along(df)) {
means[i] <- mean(df[,i])
}
sds <- numeric(ncol(df))
for (i in seq_along(df)) {
sds[i] <- sd(df[,i])
}
means
sds
means<-apply(df, 2, mean)
sds<-apply(df, 2, sd)
means
sds
colMeans(df)
df<-as.data.frame(rep(mtcars, 2000))
dim(df)
system.time({
means <- numeric(ncol(df))
for (i in seq_along(df)) {
means[i] <- mean(df[,i])
}
})
system.time({
means<-apply(df, 2, mean)
})
system.time({
means<-sapply(df, mean)
})
system.time({
means<-colMeans(df)
})
df<-mtcars
CVs<-apply(df, 2, function(x){
sd(x)/mean(x)
})
CVs
CV<-function(x){
sd(x)/mean(x)
}
CVs<-apply(df, 2, CV)
CVs
?CV
write.csv(x = mtcars, file = "mtcars.csv")
write.csv(x = mtcars, file = "mtcars.csv")
my_data <- read.csv("mtcars.csv")
View(my_data)
class(my_data)
dim(my_data)
str(my_data)
str(mtcars)
my_data$cyl <- as.character(my_data$cyl)
typeof(my_data$cyl)
my_data <- read.csv("mtcars.csv", colClasses = "character")
str(my_data)
library(tidyverse)
head(my_data)
str(my_data)
my_data <- read.csv("mtcars.csv")
head(my_data)
my_data%>%
filter(disp < 100)
my_data%>%
filter(disp < 100, gear == 5)
my_data%>%
select(mpg, disp, wt)
my_data%>%
filter(disp < 100)%>%
select(mpg, disp, wt)
my_data<-my_data%>%
filter(disp < 100)
my_data<-my_data%>%
select(mpg, disp, wt)
my_data
my_data<-mtcars
my_data
my_data<-my_data%>%
filter(disp < 100)
my_data<-my_data%>%
select(mpg, disp, wt)
my_data
my_data<-mtcars
my_data%>%
mutate(size = ifelse(wt > 2, "big", "small"))
my_data%>%
mutate(size = ifelse(wt > 2, "big", "small"),
cyl_gear = paste(cyl, gear, sep = "_"))
mwm_df <- read.csv("../data/odc-tbi_408.csv")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, error = FALSE, warning = FALSE)
?chicks
?chiks
?cheicks
data("chickwts")
?data("chickwts")
?chickwts
?ChickWeight
dataset<-ChickWeight
dataset
head(dataset)
ggplot(df, aes(Time, weight))+
geom_point()+
stat_smooth(method = lm)
library(tidyverse)
str(dataset)
dataset_summary<-dataset%>%
group_by(Diet, Time)%>%
summarise(mean_weight = mean(weight),
SD_weight = SD(weight))
dataset_summary<-dataset%>%
group_by(Diet, Time)%>%
summarise(mean_weight = mean(weight),
SD_weight = sd(weight))
dataset_summary
boxplot(weight~Diet*Time, data = dataset)
analysis<-aov(Weight ~ Diet*Time + Error(Chick))
analysis<-aov(weight ~ Diet*Time + Error(Chick), data = dataset)
summary(analysis)
View(dataset)
dataset_summary<-dataset%>%
group_by(Diet, Time)%>%
summarise(mean_weight = mean(weight),
SD_weight = sd(weight),
n_animals = n())
dataset_summary
library(lme4)
analysis<-lmer(weight ~ Diet*Time + (Time|Chick), data = dataset)
anova(analysis)
plot(analysis)
analysis<-aov(weight ~ Diet*factor(Time) + Error(Chick), data = dataset)
anova(analysis)
summary(analysis)
ggplot(dataset, aes(Time, weight, color = Diet))+
stat_summary(fun = mean, geom = "line")
ggplot(dataset, aes(Time, weight, color = Diet))+
stat_summary(fun = mean, geom = "line")+
stat_summary(fun.data = mean_se, geom = "errorbar")
ggplot(dataset, aes(Time, weight, color = Diet))+
stat_summary(fun = mean, geom = "line")+
stat_summary(fun.data = mean_se, geom = "errorbar")+
theme_minimal()
ggplot(dataset, aes(Time, weight, color = Diet))+
stat_summary(fun = mean, geom = "line")+
stat_summary(fun.data = mean_se, geom = "errorbar")+
stat_summary(fun = mean, geom = "point")+
theme_minimal()
ggplot(dataset, aes(Time, weight, color = Diet, shape = Diet))+
stat_summary(fun = mean, geom = "line")+
stat_summary(fun.data = mean_se, geom = "errorbar")+
stat_summary(fun = mean, geom = "point")+
theme_minimal()
ggplot(dataset, aes(Time, weight, color = Diet, shape = Diet))+
stat_summary(fun = mean, geom = "line")+
stat_summary(fun.data = mean_se, geom = "errorbar")+
stat_summary(fun = mean, geom = "point")+
xlab("Days since birth")+
ylab("Weight(g)")+
theme_minimal()
ggplot(dataset, aes(Time, weight, color = Diet, shape = Diet))+
stat_summary(fun = mean, geom = "line")+
stat_summary(fun.data = mean_se, geom = "errorbar")+
stat_summary(fun = mean, geom = "point")+
xlab("Time from birth (days)")+
ylab("Weight(g)")+
theme_minimal()
sjPlot::tab_model(analysis)
mtcars
mtcars$cyl
rownames(mtcars)
mtcars_t<-t(mtcars)
mtcars_t
iris
?mtcars
bj1_t<-t(mtcars)
bj1_t
bj1 t<-t(mtcars)
iris
mtcars[c(1,2,3),"disp"]
mtcars
mtcars[,c("disp", "cyl")]
mtcars[1,2,3,"disp"]
c(1,2,3)
mtcars[c(1,2,3),c("disp", "cyl")]
mtcars[,4]
1:10
5:15
mtcars[1:3,c("disp", "cyl")]
c(5:15, 50:100)
1:10
mtcars[1:10,]
mtcars$cyl==6
mtcars[mtcars$cyl==6,]
mtcars[mtcars$cyl %in% c(6,4),]
mtcars[mtcars$cyl %in% c(6,12),]
mtcars[mtcars$cyl %in% c(4:12),]
mtcars[mtcars$mpg %in% 10:20,]
10:20
my_dataframe <- data.frame(Gene = c("gfap", "tnfa", "il1b"),
expression = c(10.3, 34.5, 5.7))
my_dataframe
my_dataframe$number_animals<-c(2,2,4)
my_dataframe
my_dataframe <- data.frame(Gene = c("gfap", "tnfa", "il1b"),
expression = c(10.3, 34.5, 5.7))
my_dataframe$number_animals<-c(2,2)
my_dataframe$number_animals<-c(2,2, NA)
my_dataframe
write.csv(x = mtcars, file = "mtcars.csv")
write.csv(x = mtcars, file = "mtcars.csv")
write.csv(x = mtcars, file = "mtcars.csv")
rm(mtcars)
bj1
bj1_t
write.csv(x = bj1_t, file = "bj1_t.csv")
rm(bj1_t)
bj1_t
my_data <- read.csv("../bj1_t.csv")
my_data <- read.csv("bj1_t.csv")
my_data
my_data <- read.csv("bj1_t.csv", row.names = 1)
my_data
my_data <- read.csv("bj1_t.csv", row.names = 1, skip = 1)
my_data
my_data <- read.csv("bj1_t.csv", skip = 1)
my_data
my_data <- read.csv("bj1_t.csv")
my_data
my_data <- read.csv("bj1_t.csv", skip =1)
my_data
my_data <- read.csv(skip =1,"bj1_t.csv" )
my_data
my_data <- read.csv(1,"bj1_t.csv" )
odc_df<-read.csv("data/odc-sci_747.csv")
odc_df<-read.csv("data/odc-sci_747.csv")
setwd("C:/Users/atorresespin/Lab/teaching R/Fouad Lab/0. Use Case")
odc_df<-read.csv("data/odc-sci_747.csv")
View(odc_df)
# write code here to check the column names of the data
colnames(odc_df)
# write code here to check the structure of the data and the data dictionary
str(odc_df)
odc_dic<-read.csv("data/odc-sci_747_dictionary.csv")
VarNames<-colnames(odc_df)
colnames(odc_dic)
VarNames[VarNames%in%odc_dic$VariableName]
# Correct variable names if needed. In this example we set the first column name for the data dictionary to be "VariableName"
colnames(odc_dic)[1]<-"VariableName"
VarNames[VarNames%in%odc_dic$VariableName]
VarNames%in%odc_dic$VariableName #matches
mean(VarNames%in%odc_dic$VariableName) # proportion of matches
VarNames[!VarNames%in%odc_dic$VariableName] #which ones do no match
View(odc_dic)
# the unique function returns the different values in a vector
unique(odc_df$Group)
unique(odc_df$Cohort)
table(odc_df$Group, odc_df$Cohort)
addmargins(table(odc_df$Group, odc_df$Cohort))
